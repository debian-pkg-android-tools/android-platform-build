Source: android-platform-build
Section: devel
Priority: extra
Maintainer: Android tools Maintainer <android-tools-devel@lists.alioth.debian.org>
Uploaders: Hans-Christoph Steiner <hans@eds.org>
Build-Depends: debhelper (>=9),
               zlib1g-dev,
               libutils-dev,
               libandroidlog-dev,
               libandroidcutils-dev
Standards-Version: 3.9.5
Homepage: https://android.googlesource.com/platform/build
Vcs-Git: https://alioth.debian.org/anonscm/git/android-tools/android-platform-build.git
Vcs-Browser: http://anonscm.debian.org/gitweb/?p=android-tools/android-platform-build.git

Package: zipalign
Section: devel
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: Align zip/jar/apk along byte boundaries
 The purpose of zipalign is to ensure that all uncompressed data starts
 with a particular alignment relative to the start of the file.  This
 allows those portions to be accessed directly with mmap() even if they
 contain binary data with alignment restrictions.
 .
 Some data needs to be word-aligned for easy access, others might benefit
 from being page-aligned.  The adjustment is made by altering the size of
 the "extra" field in the zip Local File Header sections.  Existing data
 in the "extra" fields may be altered by this process.
 .
 Compressed data isn't very useful until it's uncompressed, so there's no
 need to adjust its alignment.
 .
 Alterations to the archive, such as renaming or deleting entries, will
 potentially disrupt the alignment of the modified entry and all later
 entries.  Files added to an "aligned" archive will not be aligned.
 .
 By default, zipalign will not overwrite an existing output file.  With the
 "-f" flag, an existing file will be overwritten.
 .
 You can use the "-c" flag to test whether a zip archive is properly aligned.
